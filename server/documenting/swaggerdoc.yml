swagger: "2.0"
info:
  description: "EPIC MAIL App helps people to exchange messages/information over the internet. As EPIC Andelans who work towards advancing human potential and giving back to the society, it is through this app that they wish to empower others."
  version: "1.0.0"
  title: "EPIC MAIL"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhist:7000"
basePath: "/api/v1"
tags:
- name: "Users"
  description: "Get access to all users registered on the EPIC MAIL platform"
- name: "Messages"
  description: "Everything about the messages and how the user interacts with the messages' interface"
schemes:
- "https"
- "http"
paths:
  /auth/signup:
    post:
      tags:
      - "Users"
      summary: "The path leads to adding the user into the database"
      description: "A user creates an account to get registered"
      operationId: "addUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User information details"
        required: true
        schema:
          $ref: "#/definitions/signup"
      responses:
        201:
          description: "signup"
          
  /auth/login:
    post:
      tags:
      - "Users"
      summary: "The path leads to the users database"
      description: "A user signs in"
      operationId: "login"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User information details"
        required: true
        schema:
          $ref: "#/definitions/login"
      responses:
        200:
          description: "login"  
  /messages:
    post:
      tags:
      - "Messages"
      summary: "User can create an email/message"
      description: "A user sends a message after signing in, entering the credentials of the receiver and composing the message"
      operationId: "create an email/message"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Received email/message content"
        required: true
        schema:
          $ref: "#/definitions/messages"
      responses:
        200:
          description: "compose a new message/email"
          
  /messages/inbox:
    get:
      tags:
      - "Messages"
      summary: "User can fetch all received emails"
      description: "A user signs in and get all received emails"
      operationId: "allReceived"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "all received messages in the database are fetched"
        required: true
        schema:
          $ref: "#/definitions/messages/inbox"
      responses:
        200:
          description: "fetch all received emails"  
          
  /messages/unread:
    get:
      tags:
      - "Messages"
      summary: "User can fetch all received unread emails"
      description: "A user signs in and get all received unread emails"
      operationId: "allReceivedUnread"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "all received but unread messages in the database are fetched"
        required: true
        schema:
          $ref: "#/definitions/messages/unread"
      responses:
        200:
          description: "fetch all received emails"  
          
  /messages/sent:
    get:
      tags:
      - "Messages"
      summary: "User can fetch all sent emails"
      description: "A user signs in and get all sent emails"
      operationId: "allSent"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "all sent messages in the database are fetched"
        required: true
        schema:
          $ref: "#/definitions/messages/sent"
      responses:
        200:
          description: "fetch all sent emails" 
          
  /messages/id:
    get:
      tags:
      - "Messages"
      summary: "User can fetch a specific mail by ID"
      description: "A user signs in and fetch a specific mail"
      operationId: "messageId"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "a specific mail is fetched from the database"
        required: true
        schema:
          $ref: "#/definitions/messages/id"
      responses:
        200:
          description: "fetch a specific mail"  
          
  /messages/<message-Id>:
    delete:
      tags:
      - "Messages"
      summary: "User can fetch a specific mail by ID and delete it"
      description: "A user signs in and fetch a specific mail by id and delete it"
      operationId: "<messagw-id>"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "a specific mail is fetched from the database and is deleted"
        required: true
        schema:
          $ref: "#/definitions/messages/<message-Id>"
      responses:
        200:
          description: "fetch a specific mail and delete it"  
  
definitions:
  signup:
    type: "object"
    required:
    - "firstname"
    - "lastname"
    - "email"
    - "password"
    properties:
      firstname:
        type: "string"
      lastname:
        type: "string"
      email:
        type: "string"
        example: "christopheH@gmail.com"
      password:
        type: "string"
        
  login:
    type: "object"
    required:
    - "email"
    - "password"
    properties:
        email:
         type: "string"
         example: "christopheH@gmail.com"
        password:
         type: "string"  
         
  messages:
    type: "object"
    required:
    - "subject"
    - "message"
    properties:
      subject:
        type: "string"
      message:
        type: "string"
        
  messages/inbox:
    type: "object"
    required:
    - "receiverId"
    - "messageId"
    - "createdOn"
    properties:
      receiverId:
        type: "integer"
      messageId:
        type: "integer"
      createdOn:
        type: "string"
        
  messages/sent:
    type: "object"
    required:
    - "senderId"
    - "messageId"
    - "createdOn"
    properties:
      senderId:
        type: "integer"
      messageId:
        type: "integer"
      createdOn:
        type: "string"
        
  messages/id:
    type: "object"
    required:
    - "Id"
    - "createdOn"
    - "subject"
    - "message"
    - "parentMessageId"
    - "status"
    properties:
      Id:
        type: "integer"
      createdOn:
        type: "string"
      subject:
        type: "string"
      message:
        type: "string"
      parentMessageId:
        type: "integer"
      status:
        type: "string"
        
  messages/<message-id>:
    type: "object"
    required:
    - "Id"
    properties:
      Id:
        type: "integer"
  
  